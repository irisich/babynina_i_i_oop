{\rtf1\ansi\ansicpg1251\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset204\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset204\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset204\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\info 
{\title {\comment QRBeautify }QRBeautify}
{\comment \'D1\'EE\'E7\'E4\'E0\'ED\'EE \'F1\'E8\'F1\'F2\'E5\'EC\'EE\'E9 doxygen 1.9.7.}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt QRBeautify}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
\'C2\'E5\'F0\'F1\'E8\'FF \par\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'CE\'E3\'EB\'E0\'E2\'EB\'E5\'ED\'E8\'E5\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\par \pard\plain 
\par \pard\plain 
\pard\plain \s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
QR Code generator library - C++\par \pard\plain 
{\tc\tcl1 \v QR Code generator library - C++}
{\xe \v QR Code generator library - C++}
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Introduction
\par}
{\tc\tcl2 \v Introduction}
This project aims to be the best, clearest QR Code generator library. The primary goals are flexible options and absolute correctness. Secondary goals are compact implementation size and good documentation comments.\par
Home page with live JavaScript demo, extensive descriptions, and competitor comparisons: {\f2 https://www.nayuki.io/page/qr-code-generator-library}\par}
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Features
\par}
{\tc\tcl2 \v Features}
Core features:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Significantly shorter code but more documentation comments compared to competing libraries\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Supports encoding all 40 versions (sizes) and all 4 error correction levels, as per the QR Code Model 2 standard\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Output format: Raw modules/pixels of the QR symbol\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Detects finder-like penalty patterns more accurately than other implementations\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Encodes numeric and special-alphanumeric text in less space than general text\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Coded carefully to prevent memory corruption, integer overflow, platform-dependent inconsistencies, and undefined behavior; tested rigorously to confirm safety\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
Open-source code under the permissive MIT License\par}
\par
Manual parameters:\par
{
\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
User can specify minimum and maximum version numbers allowed, then library will automatically choose smallest version in the range that fits the data\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
User can specify mask pattern manually, otherwise library will automatically evaluate all 8 masks and select the optimal one\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
User can specify absolute error correction level, or allow the library to boost it if it doesn't increase the version number\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
User can create a list of data segments manually and add ECI segments\par}
\par
More information about QR Code technology and this library's design can be found on the project home page.\par}
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{{\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Examples
\par}
{\tc\tcl2 \v Examples}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid  ++\par
{\cf21 #include <string>}\par
{\cf21 #include <vector>}\par
{\cf21 #include "QrCode.hpp"}\par
{\cf17 using namespace }qrcodegen;\par
\par
{\cf20 // Simple operation}\par
QrCode qr0 = QrCode::encodeText({\cf22 "Hello, world!"}, QrCode::Ecc::MEDIUM);\par
std::string svg = toSvgString(qr0, 4);  {\cf20 // See QrCodeGeneratorDemo}\par
\par
{\cf20 // Manual operation}\par
std::vector<QrSegment> segs =\par
    QrSegment::makeSegments({\cf22 "3141592653589793238462643383"});\par
QrCode qr1 = QrCode::encodeSegments(\par
    segs, QrCode::Ecc::HIGH, 5, 5, 2, {\cf17 false});\par
{\cf19 for} ({\cf18 int} y = 0; y < qr1.getSize(); y++) \{\par
    {\cf19 for} ({\cf18 int} x = 0; x < qr1.getSize(); x++) \{\par
        (... paint qr1.getModule(x, y) ...)\par
    \}\par
\}\par
}
\par
More complete set of examples: {\f2 https://github.com/nayuki/QR-Code-generator/blob/master/cpp/QrCodeGeneratorDemo.cpp} . \par}
}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'C0\'EB\'F4\'E0\'E2\'E8\'F2\'ED\'FB\'E9 \'F3\'EA\'E0\'E7\'E0\'F2\'E5\'EB\'FC \'EF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2 \'E8\'EC\'E5\'ED\par \pard\plain 
{\tc \v \'C0\'EB\'F4\'E0\'E2\'E8\'F2\'ED\'FB\'E9 \'F3\'EA\'E0\'E7\'E0\'F2\'E5\'EB\'FC \'EF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2 \'E8\'EC\'E5\'ED}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2\'E0 \'E8\'EC\'E5\'ED\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'CF\'EE\'EB\'ED\'FB\'E9 \'F1\'EF\'E8\'F1\'EE\'EA \'EF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2 \'E8\'EC\'E5\'ED.}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b qrcodegen} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'C8\'E5\'F0\'E0\'F0\'F5\'E8\'F7\'E5\'F1\'EA\'E8\'E9 \'F1\'EF\'E8\'F1\'EE\'EA \'EA\'EB\'E0\'F1\'F1\'EE\'E2\par \pard\plain 
{\tc \v \'C8\'E5\'F0\'E0\'F0\'F5\'E8\'F7\'E5\'F1\'EA\'E8\'E9 \'F1\'EF\'E8\'F1\'EE\'EA \'EA\'EB\'E0\'F1\'F1\'EE\'E2}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'C8\'E5\'F0\'E0\'F0\'F5\'E8\'FF \'EA\'EB\'E0\'F1\'F1\'EE\'E2\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'C8\'E5\'F0\'E0\'F0\'F5\'E8\'FF \'EA\'EB\'E0\'F1\'F1\'EE\'E2.}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
std::length_error
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
qrcodegen::data_too_long\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
qrcodegen::QrSegment::Mode\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
QrBeautifier\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
qrcodegen::QrCode\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
qrcodegen::QrSegment\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
std::vector
{
\par
\pard\plain \s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
qrcodegen::BitBuffer\tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'C0\'EB\'F4\'E0\'E2\'E8\'F2\'ED\'FB\'E9 \'F3\'EA\'E0\'E7\'E0\'F2\'E5\'EB\'FC \'EA\'EB\'E0\'F1\'F1\'EE\'E2\par \pard\plain 
{\tc \v \'C0\'EB\'F4\'E0\'E2\'E8\'F2\'ED\'FB\'E9 \'F3\'EA\'E0\'E7\'E0\'F2\'E5\'EB\'FC \'EA\'EB\'E0\'F1\'F1\'EE\'E2}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1\'FB\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'CA\'EB\'E0\'F1\'F1\'FB \'F1 \'E8\'F5 \'EA\'F0\'E0\'F2\'EA\'E8\'EC \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'E5\'EC.}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b qrcodegen::BitBuffer} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAY \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b qrcodegen::data_too_long} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABB \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b qrcodegen::QrSegment::Mode} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAACJ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b QrBeautifier} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main class })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAQ \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b qrcodegen::QrCode} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b qrcodegen::QrSegment} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABV \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'D1\'EF\'E8\'F1\'EE\'EA \'F4\'E0\'E9\'EB\'EE\'E2\par \pard\plain 
{\tc \v \'D1\'EF\'E8\'F1\'EE\'EA \'F4\'E0\'E9\'EB\'EE\'E2}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB\'FB\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid \'CF\'EE\'EB\'ED\'FB\'E9 \'F1\'EF\'E8\'F1\'EE\'EA \'F4\'E0\'E9\'EB\'EE\'E2.}
{
\par
\pard\plain \s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b QRBeautify.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAH \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b QRBeautify.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAI \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b qr_generator/{\b qrcodegen.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAC \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b qr_generator/{\b qrcodegen.hpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAD \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b qr_generator/{\b QrCodeGeneratorDemo.cpp} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAE \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2\'E0 \'E8\'EC\'E5\'ED\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2\'EE \'E8\'EC\'E5\'ED qrcodegen\par \pard\plain 
{\tc\tcl2 \v qrcodegen}
{\xe \v qrcodegen}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EB\'E0\'F1\'F1\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b BitBuffer}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b data_too_long}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b QrCode}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b QrSegment}\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'CA\'EB\'E0\'F1\'F1\'FB{\tc \v \'CA\'EB\'E0\'F1\'F1\'FB}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 qrcodegen::BitBuffer\par \pard\plain 
{\tc\tcl2 \v qrcodegen::BitBuffer}
{\xe \v qrcodegen::BitBuffer}
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
\par
{
{\f2 #include <qrcodegen.hpp>}}\par
\'C3\'F0\'E0\'F4 \'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'E8\'FF:qrcodegen::BitBuffer:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classqrcodegen_1_1_bit_buffer.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b BitBuffer} ()\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b appendBits} (std::uint32_t val, int len)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EE\'ED\'F1\'F2\'F0\'F3\'EA\'F2\'EE\'F0(\'FB)\par
\pard\plain 
{\xe \v BitBuffer\:qrcodegen::BitBuffer}
{\xe \v qrcodegen::BitBuffer\:BitBuffer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
qrcodegen::BitBuffer::BitBuffer ()}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E5\'F2\'EE\'E4\'FB\par
\pard\plain 
{\xe \v appendBits\:qrcodegen::BitBuffer}
{\xe \v qrcodegen::BitBuffer\:appendBits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void qrcodegen::BitBuffer::appendBits (std::uint32_t  {\i val}, int  {\i len})}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'EE\'E2 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E0\'F5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
qr_generator/{\b qrcodegen.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
qr_generator/{\b qrcodegen.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 qrcodegen::data_too_long\par \pard\plain 
{\tc\tcl2 \v qrcodegen::data_too_long}
{\xe \v qrcodegen::data_too_long}
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
\par
{
{\f2 #include <qrcodegen.hpp>}}\par
\'C3\'F0\'E0\'F4 \'ED\'E0\'F1\'EB\'E5\'E4\'EE\'E2\'E0\'ED\'E8\'FF:qrcodegen::data_too_long:{
\pard\plain 
\par\pard \qc {\field\flddirty {\*\fldinst INCLUDEPICTURE "classqrcodegen_1_1data__too__long.png" \\d \\*MERGEFORMAT}{\fldrslt IMAGE}}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b data_too_long} (const std::string &msg)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EE\'ED\'F1\'F2\'F0\'F3\'EA\'F2\'EE\'F0(\'FB)\par
\pard\plain 
{\xe \v data_too_long\:qrcodegen::data_too_long}
{\xe \v qrcodegen::data_too_long\:data_too_long}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
qrcodegen::data_too_long::data_too_long (const std::string &  {\i msg}){\f2 [explicit]}}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'EE\'E2 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E0\'F5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
qr_generator/{\b qrcodegen.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
qr_generator/{\b qrcodegen.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 qrcodegen::QrSegment::Mode\par \pard\plain 
{\tc\tcl2 \v qrcodegen::QrSegment::Mode}
{\xe \v qrcodegen::QrSegment::Mode}
{\bkmkstart AAAAAAAACJ}
{\bkmkend AAAAAAAACJ}
\par
{
{\f2 #include <qrcodegen.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getModeBits} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b numCharCountBits} (int ver) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'D1\'F2\'E0\'F2\'E8\'F7\'E5\'F1\'EA\'E8\'E5 \'EE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'E4\'E0\'ED\'ED\'FB\'E5\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b Mode} {\b NUMERIC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b Mode} {\b ALPHANUMERIC}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b Mode} {\b BYTE}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b Mode} {\b KANJI}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static const {\b Mode} {\b ECI}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E5\'F2\'EE\'E4\'FB\par
\pard\plain 
{\xe \v getModeBits\:qrcodegen::QrSegment::Mode}
{\xe \v qrcodegen::QrSegment::Mode\:getModeBits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int qrcodegen::QrSegment::Mode::getModeBits () const}}
\par
{\bkmkstart AAAAAAAACK}
{\bkmkend AAAAAAAACK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v numCharCountBits\:qrcodegen::QrSegment::Mode}
{\xe \v qrcodegen::QrSegment::Mode\:numCharCountBits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int qrcodegen::QrSegment::Mode::numCharCountBits (int  {\i ver}) const}}
\par
{\bkmkstart AAAAAAAACL}
{\bkmkend AAAAAAAACL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C4\'E0\'ED\'ED\'FB\'E5 \'EA\'EB\'E0\'F1\'F1\'E0\par
\pard\plain 
{\xe \v ALPHANUMERIC\:qrcodegen::QrSegment::Mode}
{\xe \v qrcodegen::QrSegment::Mode\:ALPHANUMERIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b QrSegment::Mode} qrcodegen::QrSegment::Mode::ALPHANUMERIC{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACM}
{\bkmkend AAAAAAAACM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v BYTE\:qrcodegen::QrSegment::Mode}
{\xe \v qrcodegen::QrSegment::Mode\:BYTE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b QrSegment::Mode} qrcodegen::QrSegment::Mode::BYTE{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACN}
{\bkmkend AAAAAAAACN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v ECI\:qrcodegen::QrSegment::Mode}
{\xe \v qrcodegen::QrSegment::Mode\:ECI}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b QrSegment::Mode} qrcodegen::QrSegment::Mode::ECI{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACO}
{\bkmkend AAAAAAAACO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v KANJI\:qrcodegen::QrSegment::Mode}
{\xe \v qrcodegen::QrSegment::Mode\:KANJI}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b QrSegment::Mode} qrcodegen::QrSegment::Mode::KANJI{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACP}
{\bkmkend AAAAAAAACP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v NUMERIC\:qrcodegen::QrSegment::Mode}
{\xe \v qrcodegen::QrSegment::Mode\:NUMERIC}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b QrSegment::Mode} qrcodegen::QrSegment::Mode::NUMERIC{\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACQ}
{\bkmkend AAAAAAAACQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'EE\'E2 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E0\'F5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
qr_generator/{\b qrcodegen.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
qr_generator/{\b qrcodegen.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 QrBeautifier\par \pard\plain 
{\tc\tcl2 \v QrBeautifier}
{\xe \v QrBeautifier}
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main class. }}\par
{
{\f2 #include <QRBeautify.h>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QrBeautifier} (const char *text)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Empty default constructor. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b saveImage} ()\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function to save QR to file. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b makeSolidImage} (int red, int green, int blue, {\b AnchorShape} shape)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for creating solid-color QR-code. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b overlayImageWithQR} (const char *image_path)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for adding QR code over image. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b overlayQRWithImage} (const char *image_path)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for encoding QR code with image data. }{
}\par
}\par}
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b heatmap} ({\b AnchorShape} shape)\par
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for generating heatmap-like QR code. }{
}\par
}\par}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'EE\'E4\'F0\'EE\'E1\'ED\'EE\'E5 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'E5\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main class. \par
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EE\'ED\'F1\'F2\'F0\'F3\'EA\'F2\'EE\'F0(\'FB)\par
\pard\plain 
{\xe \v QrBeautifier\:QrBeautifier}
{\xe \v QrBeautifier\:QrBeautifier}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
QrBeautifier::QrBeautifier (const char *  {\i text})}}
\par
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Empty default constructor. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C0\'F0\'E3\'F3\'EC\'E5\'ED\'F2\'FB\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i text} \cell }{QR code text \cell }
{\row }
}
}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E5\'F2\'EE\'E4\'FB\par
\pard\plain 
{\xe \v heatmap\:QrBeautifier}
{\xe \v QrBeautifier\:heatmap}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QrBeautifier::heatmap ({\b AnchorShape}  {\i shape})}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for generating heatmap-like QR code. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C0\'F0\'E3\'F3\'EC\'E5\'ED\'F2\'FB\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i shape} \cell }{Desired anchor shape (corner blocks) \cell }
{\row }
}
}}
{\xe \v makeSolidImage\:QrBeautifier}
{\xe \v QrBeautifier\:makeSolidImage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QrBeautifier::makeSolidImage (int  {\i red}, int  {\i green}, int  {\i blue}, {\b AnchorShape}  {\i shape})}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for creating solid-color QR-code. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C0\'F0\'E3\'F3\'EC\'E5\'ED\'F2\'FB\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i red} \cell }{Red color 0-255 \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i green} \cell }{Green color 0-255 \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i blue} \cell }{Blue color 0-255 \cell }
{\row }
\trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i shape} \cell }{Desired anchor shape (corner blocks) \cell }
{\row }
}
}}
{\xe \v overlayImageWithQR\:QrBeautifier}
{\xe \v QrBeautifier\:overlayImageWithQR}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QrBeautifier::overlayImageWithQR (const char *  {\i image_path})}}
\par
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for adding QR code over image. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C0\'F0\'E3\'F3\'EC\'E5\'ED\'F2\'FB\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i image_path} \cell }{Path to the desired image \cell }
{\row }
}
}}
{\xe \v overlayQRWithImage\:QrBeautifier}
{\xe \v QrBeautifier\:overlayQRWithImage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QrBeautifier::overlayQRWithImage (const char *  {\i image_path})}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function for encoding QR code with image data. }}\par
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'C0\'F0\'E3\'F3\'EC\'E5\'ED\'F2\'FB\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx1224
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx3061
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{in\cell }{{\i image_path} \cell }{Path to the desired image \cell }
{\row }
}
}}
{\xe \v saveImage\:QrBeautifier}
{\xe \v QrBeautifier\:saveImage}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void QrBeautifier::saveImage ()}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Function to save QR to file. }}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'EE\'E2 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E0\'F5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QRBeautify.h}\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QRBeautify.cpp}}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 qrcodegen::QrCode\par \pard\plain 
{\tc\tcl2 \v qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode}
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
\par
{
{\f2 #include <qrcodegen.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F2\'E8\'EF\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum class {\b Ecc} \{ {\b LOW} = 0
, {\b MEDIUM}
, {\b QUARTILE}
, {\b HIGH}
 \}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QrCode} ()=default\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QrCode} (int ver, {\b Ecc} ecl, const std::vector< std::uint8_t > &dataCodewords, int msk)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getVersion} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getSize} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b Ecc} {\b getErrorCorrectionLevel} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getMask} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
bool {\b getModule} (int x, int y) const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F1\'F2\'E0\'F2\'E8\'F7\'E5\'F1\'EA\'E8\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b QrCode} {\b encodeText} (const char *text, {\b Ecc} ecl)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b QrCode} {\b encodeBinary} (const std::vector< std::uint8_t > &data, {\b Ecc} ecl)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b QrCode} {\b encodeSegments} (const std::vector< {\b QrSegment} > &segs, {\b Ecc} ecl, int minVersion=1, int maxVersion=40, int mask=-1, bool boostEcl=true)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'D1\'F2\'E0\'F2\'E8\'F7\'E5\'F1\'EA\'E8\'E5 \'EE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'E4\'E0\'ED\'ED\'FB\'E5\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr int {\b MIN_VERSION} = 1\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static constexpr int {\b MAX_VERSION} = 40\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'E5\'F0\'E5\'F7\'E8\'F1\'EB\'E5\'ED\'E8\'FF\par
\pard\plain 
{\xe \v Ecc\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:Ecc}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum class {\b qrcodegen::QrCode::Ecc}{\f2 [strong]}}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'DD\'EB\'E5\'EC\'E5\'ED\'F2\'FB \'EF\'E5\'F0\'E5\'F7\'E8\'F1\'EB\'E5\'ED\'E8\'E9:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v LOW\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:LOW}
{\qr LOW{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
\cell }{\cell }{\row }
{\xe \v MEDIUM\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:MEDIUM}
{\qr MEDIUM{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
\cell }{\cell }{\row }
{\xe \v QUARTILE\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:QUARTILE}
{\qr QUARTILE{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
\cell }{\cell }{\row }
{\xe \v HIGH\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:HIGH}
{\qr HIGH{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
\cell }{\cell }{\row }
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EE\'ED\'F1\'F2\'F0\'F3\'EA\'F2\'EE\'F0(\'FB)\par
\pard\plain 
{\xe \v QrCode\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:QrCode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
qrcodegen::QrCode::QrCode (){\f2 [default]}}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v QrCode\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:QrCode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
qrcodegen::QrCode::QrCode (int  {\i ver}, {\b Ecc}  {\i ecl}, const std::vector< std::uint8_t > &  {\i dataCodewords}, int  {\i msk})}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E5\'F2\'EE\'E4\'FB\par
\pard\plain 
{\xe \v encodeBinary\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:encodeBinary}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QrCode} qrcodegen::QrCode::encodeBinary (const std::vector< std::uint8_t > &  {\i data}, {\b Ecc}  {\i ecl}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v encodeSegments\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:encodeSegments}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QrCode} qrcodegen::QrCode::encodeSegments (const std::vector< {\b QrSegment} > &  {\i segs}, {\b Ecc}  {\i ecl}, int  {\i minVersion} = {\f2 1}, int  {\i maxVersion} = {\f2 40}, int  {\i mask} = {\f2 -1}, bool  {\i boostEcl} = {\f2 true}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v encodeText\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:encodeText}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QrCode} qrcodegen::QrCode::encodeText (const char *  {\i text}, {\b Ecc}  {\i ecl}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAABN}
{\bkmkend AAAAAAAABN}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getErrorCorrectionLevel\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:getErrorCorrectionLevel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QrCode::Ecc} qrcodegen::QrCode::getErrorCorrectionLevel () const}}
\par
{\bkmkstart AAAAAAAABO}
{\bkmkend AAAAAAAABO}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getMask\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:getMask}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int qrcodegen::QrCode::getMask () const}}
\par
{\bkmkstart AAAAAAAABP}
{\bkmkend AAAAAAAABP}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getModule\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:getModule}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool qrcodegen::QrCode::getModule (int  {\i x}, int  {\i y}) const}}
\par
{\bkmkstart AAAAAAAABQ}
{\bkmkend AAAAAAAABQ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getSize\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:getSize}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int qrcodegen::QrCode::getSize () const}}
\par
{\bkmkstart AAAAAAAABR}
{\bkmkend AAAAAAAABR}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getVersion\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:getVersion}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int qrcodegen::QrCode::getVersion () const}}
\par
{\bkmkstart AAAAAAAABS}
{\bkmkend AAAAAAAABS}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'C4\'E0\'ED\'ED\'FB\'E5 \'EA\'EB\'E0\'F1\'F1\'E0\par
\pard\plain 
{\xe \v MAX_VERSION\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:MAX_VERSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr int qrcodegen::QrCode::MAX_VERSION = 40{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAABT}
{\bkmkend AAAAAAAABT}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MIN_VERSION\:qrcodegen::QrCode}
{\xe \v qrcodegen::QrCode\:MIN_VERSION}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
constexpr int qrcodegen::QrCode::MIN_VERSION = 1{\f2 [static]}, {\f2 [constexpr]}}}
\par
{\bkmkstart AAAAAAAABU}
{\bkmkend AAAAAAAABU}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'EE\'E2 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E0\'F5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
qr_generator/{\b qrcodegen.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
qr_generator/{\b qrcodegen.cpp}\par
}\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'CA\'EB\'E0\'F1\'F1 qrcodegen::QrSegment\par \pard\plain 
{\tc\tcl2 \v qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment}
{\bkmkstart AAAAAAAABV}
{\bkmkend AAAAAAAABV}
\par
{
{\f2 #include <qrcodegen.hpp>}}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EB\'E0\'F1\'F1\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b Mode}}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QrSegment} (const {\b Mode} &md, int numCh, const std::vector< bool > &dt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
{\b QrSegment} (const {\b Mode} &md, int numCh, std::vector< bool > &&dt)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const {\b Mode} & {\b getMode} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getNumChars} () const\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
const std::vector< bool > & {\b getData} () const\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CE\'F2\'EA\'F0\'FB\'F2\'FB\'E5 \'F1\'F2\'E0\'F2\'E8\'F7\'E5\'F1\'EA\'E8\'E5 \'F7\'EB\'E5\'ED\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b QrSegment} {\b makeBytes} (const std::vector< std::uint8_t > &data)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b QrSegment} {\b makeNumeric} (const char *digits)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b QrSegment} {\b makeAlphanumeric} (const char *text)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static std::vector< {\b QrSegment} > {\b makeSegments} (const char *text)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static {\b QrSegment} {\b makeEci} (long assignVal)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b isNumeric} (const char *text)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static bool {\b isAlphanumeric} (const char *text)\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
static int {\b getTotalBits} (const std::vector< {\b QrSegment} > &segs, int version)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EE\'ED\'F1\'F2\'F0\'F3\'EA\'F2\'EE\'F0(\'FB)\par
\pard\plain 
{\xe \v QrSegment\:qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment\:QrSegment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
qrcodegen::QrSegment::QrSegment (const {\b Mode} &  {\i md}, int  {\i numCh}, const std::vector< bool > &  {\i dt})}}
\par
{\bkmkstart AAAAAAAABW}
{\bkmkend AAAAAAAABW}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v QrSegment\:qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment\:QrSegment}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
qrcodegen::QrSegment::QrSegment (const {\b Mode} &  {\i md}, int  {\i numCh}, std::vector< bool > &&  {\i dt})}}
\par
{\bkmkstart AAAAAAAABX}
{\bkmkend AAAAAAAABX}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CC\'E5\'F2\'EE\'E4\'FB\par
\pard\plain 
{\xe \v getData\:qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment\:getData}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const std::vector< bool > & qrcodegen::QrSegment::getData () const}}
\par
{\bkmkstart AAAAAAAABY}
{\bkmkend AAAAAAAABY}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getMode\:qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment\:getMode}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
const {\b QrSegment::Mode} & qrcodegen::QrSegment::getMode () const}}
\par
{\bkmkstart AAAAAAAABZ}
{\bkmkend AAAAAAAABZ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getNumChars\:qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment\:getNumChars}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int qrcodegen::QrSegment::getNumChars () const}}
\par
{\bkmkstart AAAAAAAACA}
{\bkmkend AAAAAAAACA}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v getTotalBits\:qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment\:getTotalBits}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int qrcodegen::QrSegment::getTotalBits (const std::vector< {\b QrSegment} > &  {\i segs}, int  {\i version}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACB}
{\bkmkend AAAAAAAACB}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v isAlphanumeric\:qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment\:isAlphanumeric}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool qrcodegen::QrSegment::isAlphanumeric (const char *  {\i text}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACC}
{\bkmkend AAAAAAAACC}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v isNumeric\:qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment\:isNumeric}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
bool qrcodegen::QrSegment::isNumeric (const char *  {\i text}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACD}
{\bkmkend AAAAAAAACD}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v makeAlphanumeric\:qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment\:makeAlphanumeric}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QrSegment} qrcodegen::QrSegment::makeAlphanumeric (const char *  {\i text}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACE}
{\bkmkend AAAAAAAACE}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v makeBytes\:qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment\:makeBytes}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QrSegment} qrcodegen::QrSegment::makeBytes (const std::vector< std::uint8_t > &  {\i data}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACF}
{\bkmkend AAAAAAAACF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v makeEci\:qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment\:makeEci}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QrSegment} qrcodegen::QrSegment::makeEci (long  {\i assignVal}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACG}
{\bkmkend AAAAAAAACG}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v makeNumeric\:qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment\:makeNumeric}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
{\b QrSegment} qrcodegen::QrSegment::makeNumeric (const char *  {\i digits}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACH}
{\bkmkend AAAAAAAACH}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v makeSegments\:qrcodegen::QrSegment}
{\xe \v qrcodegen::QrSegment\:makeSegments}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
vector< {\b QrSegment} > qrcodegen::QrSegment::makeSegments (const char *  {\i text}){\f2 [static]}}}
\par
{\bkmkstart AAAAAAAACI}
{\bkmkend AAAAAAAACI}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\'CE\'E1\'FA\'FF\'E2\'EB\'E5\'ED\'E8\'FF \'E8 \'EE\'EF\'E8\'F1\'E0\'ED\'E8\'FF \'F7\'EB\'E5\'ED\'EE\'E2 \'EA\'EB\'E0\'F1\'F1\'EE\'E2 \'ED\'E0\'F5\'EE\'E4\'FF\'F2\'F1\'FF \'E2 \'F4\'E0\'E9\'EB\'E0\'F5:{\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
qr_generator/{\b qrcodegen.hpp}\par
\pard\plain \s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
qr_generator/{\b qrcodegen.cpp}\par
}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\'D4\'E0\'E9\'EB\'FB{\tc \v \'D4\'E0\'E9\'EB\'FB}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB qr_generator/qrcodegen.cpp\par \pard\plain 
{\tc\tcl2 \v qr_generator/qrcodegen.cpp}
{\xe \v qr_generator/qrcodegen.cpp}
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <algorithm>}\par
{\f2 #include <cassert>}\par
{\f2 #include <climits>}\par
{\f2 #include <cstddef>}\par
{\f2 #include <cstdlib>}\par
{\f2 #include <cstring>}\par
{\f2 #include <sstream>}\par
{\f2 #include <utility>}\par
{\f2 #include "qrcodegen.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2\'E0 \'E8\'EC\'E5\'ED\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b qrcodegen}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB qr_generator/qrcodegen.hpp\par \pard\plain 
{\tc\tcl2 \v qr_generator/qrcodegen.hpp}
{\xe \v qr_generator/qrcodegen.hpp}
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <array>}\par
{\f2 #include <cstdint>}\par
{\f2 #include <stdexcept>}\par
{\f2 #include <string>}\par
{\f2 #include <vector>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EB\'E0\'F1\'F1\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b qrcodegen::QrSegment}\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b qrcodegen::QrSegment::Mode}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b qrcodegen::QrCode}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b qrcodegen::data_too_long}\par
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b qrcodegen::BitBuffer}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'F0\'EE\'F1\'F2\'F0\'E0\'ED\'F1\'F2\'E2\'E0 \'E8\'EC\'E5\'ED\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
namespace {\b qrcodegen}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
qrcodegen.hpp\par \pard\plain 
{\tc\tcl2 \v qr_generator/qrcodegen.hpp}
{\xe \v qr_generator/qrcodegen.hpp}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf20 /* }\par
2 {\cf20  * QR Code generator library (C++)}\par
3 {\cf20  * }\par
4 {\cf20  * Copyright (c) Project Nayuki. (MIT License)}\par
5 {\cf20  * https://www.nayuki.io/page/qr-code-generator-library}\par
6 {\cf20  * }\par
7 {\cf20  * Permission is hereby granted, free of charge, to any person obtaining a copy of}\par
8 {\cf20  * this software and associated documentation files (the "Software"), to deal in}\par
9 {\cf20  * the Software without restriction, including without limitation the rights to}\par
10 {\cf20  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of}\par
11 {\cf20  * the Software, and to permit persons to whom the Software is furnished to do so,}\par
12 {\cf20  * subject to the following conditions:}\par
13 {\cf20  * - The above copyright notice and this permission notice shall be included in}\par
14 {\cf20  *   all copies or substantial portions of the Software.}\par
15 {\cf20  * - The Software is provided "as is", without warranty of any kind, express or}\par
16 {\cf20  *   implied, including but not limited to the warranties of merchantability,}\par
17 {\cf20  *   fitness for a particular purpose and noninfringement. In no event shall the}\par
18 {\cf20  *   authors or copyright holders be liable for any claim, damages or other}\par
19 {\cf20  *   liability, whether in an action of contract, tort or otherwise, arising from,}\par
20 {\cf20  *   out of or in connection with the Software or the use or other dealings in the}\par
21 {\cf20  *   Software.}\par
22 {\cf20  */}\par
23 \par
24 {\cf21 #pragma once}\par
25 \par
26 {\cf21 #include <array>}\par
27 {\cf21 #include <cstdint>}\par
28 {\cf21 #include <stdexcept>}\par
29 {\cf21 #include <string>}\par
30 {\cf21 #include <vector>}\par
31 \par
32 \par
33 {\cf17 namespace }qrcodegen \{\par
34 \par
35 {\cf20 /* }\par
36 {\cf20  * A segment of character/binary/control data in a QR Code symbol.}\par
37 {\cf20  * Instances of this class are immutable.}\par
38 {\cf20  * The mid-level way to create a segment is to take the payload data}\par
39 {\cf20  * and call a static factory function such as QrSegment::makeNumeric().}\par
40 {\cf20  * The low-level way to create a segment is to custom-make the bit buffer}\par
41 {\cf20  * and call the QrSegment() constructor with appropriate values.}\par
42 {\cf20  * This segment class imposes no length restrictions, but QR Codes have restrictions.}\par
43 {\cf20  * Even in the most favorable conditions, a QR Code can only hold 7089 characters of data.}\par
44 {\cf20  * Any segment longer than this is meaningless for the purpose of generating QR Codes.}\par
45 {\cf20  */}\par
46 {\cf17 class }QrSegment final \{\par
47     \par
48     {\cf20 /*---- Public helper enumeration ----*/}\par
49     \par
50     {\cf20 /* }\par
51 {\cf20      * Describes how a segment's data bits are interpreted. Immutable.}\par
52 {\cf20      */}\par
53     {\cf17 public}: {\cf17 class }Mode final \{\par
54         \par
55         {\cf20 /*-- Constants --*/}\par
56         \par
57         {\cf17 public}: {\cf17 static} {\cf17 const} Mode NUMERIC;\par
58         {\cf17 public}: {\cf17 static} {\cf17 const} Mode ALPHANUMERIC;\par
59         {\cf17 public}: {\cf17 static} {\cf17 const} Mode BYTE;\par
60         {\cf17 public}: {\cf17 static} {\cf17 const} Mode KANJI;\par
61         {\cf17 public}: {\cf17 static} {\cf17 const} Mode ECI;\par
62         \par
63         \par
64         {\cf20 /*-- Fields --*/}\par
65         \par
66         {\cf20 // The mode indicator bits, which is a uint4 value (range 0 to 15).}\par
67         {\cf17 private}: {\cf18 int} modeBits;\par
68         \par
69         {\cf20 // Number of character count bits for three different version ranges.}\par
70         {\cf17 private}: {\cf18 int} numBitsCharCount[3];\par
71         \par
72         \par
73         {\cf20 /*-- Constructor --*/}\par
74         \par
75         {\cf17 private}: Mode({\cf18 int} mode, {\cf18 int} cc0, {\cf18 int} cc1, {\cf18 int} cc2);\par
76         \par
77         \par
78         {\cf20 /*-- Methods --*/}\par
79         \par
80         {\cf20 /* }\par
81 {\cf20          * (Package-private) Returns the mode indicator bits, which is an unsigned 4-bit value (range 0 to 15).}\par
82 {\cf20          */}\par
83         {\cf17 public}: {\cf18 int} getModeBits() {\cf17 const};\par
84         \par
85         {\cf20 /* }\par
86 {\cf20          * (Package-private) Returns the bit width of the character count field for a segment in}\par
87 {\cf20          * this mode in a QR Code at the given version number. The result is in the range [0, 16].}\par
88 {\cf20          */}\par
89         {\cf17 public}: {\cf18 int} numCharCountBits({\cf18 int} ver) {\cf17 const};\par
90         \par
91     \};\par
92     \par
93     \par
94     \par
95     {\cf20 /*---- Static factory functions (mid level) ----*/}\par
96     \par
97     {\cf20 /* }\par
98 {\cf20      * Returns a segment representing the given binary data encoded in}\par
99 {\cf20      * byte mode. All input byte vectors are acceptable. Any text string}\par
100 {\cf20      * can be converted to UTF-8 bytes and encoded as a byte mode segment.}\par
101 {\cf20      */}\par
102     {\cf17 public}: {\cf17 static} QrSegment makeBytes({\cf17 const} std::vector<std::uint8_t> &data);\par
103     \par
104     \par
105     {\cf20 /* }\par
106 {\cf20      * Returns a segment representing the given string of decimal digits encoded in numeric mode.}\par
107 {\cf20      */}\par
108     {\cf17 public}: {\cf17 static} QrSegment makeNumeric({\cf17 const} {\cf18 char} *digits);\par
109     \par
110     \par
111     {\cf20 /* }\par
112 {\cf20      * Returns a segment representing the given text string encoded in alphanumeric mode.}\par
113 {\cf20      * The characters allowed are: 0 to 9, A to Z (uppercase only), space,}\par
114 {\cf20      * dollar, percent, asterisk, plus, hyphen, period, slash, colon.}\par
115 {\cf20      */}\par
116     {\cf17 public}: {\cf17 static} QrSegment makeAlphanumeric({\cf17 const} {\cf18 char} *text);\par
117     \par
118     \par
119     {\cf20 /* }\par
120 {\cf20      * Returns a list of zero or more segments to represent the given text string. The result}\par
121 {\cf20      * may use various segment modes and switch modes to optimize the length of the bit stream.}\par
122 {\cf20      */}\par
123     {\cf17 public}: {\cf17 static} std::vector<QrSegment> makeSegments({\cf17 const} {\cf18 char} *text);\par
124     \par
125     \par
126     {\cf20 /* }\par
127 {\cf20      * Returns a segment representing an Extended Channel Interpretation}\par
128 {\cf20      * (ECI) designator with the given assignment value.}\par
129 {\cf20      */}\par
130     {\cf17 public}: {\cf17 static} QrSegment makeEci({\cf18 long} assignVal);\par
131     \par
132     \par
133     {\cf20 /*---- Public static helper functions ----*/}\par
134     \par
135     {\cf20 /* }\par
136 {\cf20      * Tests whether the given string can be encoded as a segment in numeric mode.}\par
137 {\cf20      * A string is encodable iff each character is in the range 0 to 9.}\par
138 {\cf20      */}\par
139     {\cf17 public}: {\cf17 static} {\cf18 bool} isNumeric({\cf17 const} {\cf18 char} *text);\par
140     \par
141     \par
142     {\cf20 /* }\par
143 {\cf20      * Tests whether the given string can be encoded as a segment in alphanumeric mode.}\par
144 {\cf20      * A string is encodable iff each character is in the following set: 0 to 9, A to Z}\par
145 {\cf20      * (uppercase only), space, dollar, percent, asterisk, plus, hyphen, period, slash, colon.}\par
146 {\cf20      */}\par
147     {\cf17 public}: {\cf17 static} {\cf18 bool} isAlphanumeric({\cf17 const} {\cf18 char} *text);\par
148     \par
149     \par
150     \par
151     {\cf20 /*---- Instance fields ----*/}\par
152     \par
153     {\cf20 /* The mode indicator of this segment. Accessed through getMode(). */}\par
154     {\cf17 private}: {\cf17 const} Mode *mode;\par
155     \par
156     {\cf20 /* The length of this segment's unencoded data. Measured in characters for}\par
157 {\cf20      * numeric/alphanumeric/kanji mode, bytes for byte mode, and 0 for ECI mode.}\par
158 {\cf20      * Always zero or positive. Not the same as the data's bit length.}\par
159 {\cf20      * Accessed through getNumChars(). */}\par
160     {\cf17 private}: {\cf18 int} numChars;\par
161     \par
162     {\cf20 /* The data bits of this segment. Accessed through getData(). */}\par
163     {\cf17 private}: std::vector<bool> data;\par
164     \par
165     \par
166     {\cf20 /*---- Constructors (low level) ----*/}\par
167     \par
168     {\cf20 /* }\par
169 {\cf20      * Creates a new QR Code segment with the given attributes and data.}\par
170 {\cf20      * The character count (numCh) must agree with the mode and the bit buffer length,}\par
171 {\cf20      * but the constraint isn't checked. The given bit buffer is copied and stored.}\par
172 {\cf20      */}\par
173     {\cf17 public}: QrSegment({\cf17 const} Mode &md, {\cf18 int} numCh, {\cf17 const} std::vector<bool> &dt);\par
174     \par
175     \par
176     {\cf20 /* }\par
177 {\cf20      * Creates a new QR Code segment with the given parameters and data.}\par
178 {\cf20      * The character count (numCh) must agree with the mode and the bit buffer length,}\par
179 {\cf20      * but the constraint isn't checked. The given bit buffer is moved and stored.}\par
180 {\cf20      */}\par
181     {\cf17 public}: QrSegment({\cf17 const} Mode &md, {\cf18 int} numCh, std::vector<bool> &&dt);\par
182     \par
183     \par
184     {\cf20 /*---- Methods ----*/}\par
185     \par
186     {\cf20 /* }\par
187 {\cf20      * Returns the mode field of this segment.}\par
188 {\cf20      */}\par
189     {\cf17 public}: {\cf17 const} Mode &getMode() {\cf17 const};\par
190     \par
191     \par
192     {\cf20 /* }\par
193 {\cf20      * Returns the character count field of this segment.}\par
194 {\cf20      */}\par
195     {\cf17 public}: {\cf18 int} getNumChars() {\cf17 const};\par
196     \par
197     \par
198     {\cf20 /* }\par
199 {\cf20      * Returns the data bits of this segment.}\par
200 {\cf20      */}\par
201     {\cf17 public}: {\cf17 const} std::vector<bool> &getData() {\cf17 const};\par
202     \par
203     \par
204     {\cf20 // (Package-private) Calculates the number of bits needed to encode the given segments at}\par
205     {\cf20 // the given version. Returns a non-negative number if successful. Otherwise returns -1 if a}\par
206     {\cf20 // segment has too many characters to fit its length field, or the total bits exceeds INT_MAX.}\par
207     {\cf17 public}: {\cf17 static} {\cf18 int} getTotalBits({\cf17 const} std::vector<QrSegment> &segs, {\cf18 int} version);\par
208     \par
209     \par
210     {\cf20 /*---- Private constant ----*/}\par
211     \par
212     {\cf20 /* The set of all legal characters in alphanumeric mode, where}\par
213 {\cf20      * each character value maps to the index in the string. */}\par
214     {\cf17 private}: {\cf17 static} {\cf17 const} {\cf18 char} *ALPHANUMERIC_CHARSET;\par
215     \par
216 \};\par
217 \par
218 \par
219 \par
220 {\cf20 /* }\par
221 {\cf20  * A QR Code symbol, which is a type of two-dimension barcode.}\par
222 {\cf20  * Invented by Denso Wave and described in the ISO/IEC 18004 standard.}\par
223 {\cf20  * Instances of this class represent an immutable square grid of dark and light cells.}\par
224 {\cf20  * The class provides static factory functions to create a QR Code from text or binary data.}\par
225 {\cf20  * The class covers the QR Code Model 2 specification, supporting all versions (sizes)}\par
226 {\cf20  * from 1 to 40, all 4 error correction levels, and 4 character encoding modes.}\par
227 {\cf20  * }\par
228 {\cf20  * Ways to create a QR Code object:}\par
229 {\cf20  * - High level: Take the payload data and call QrCode::encodeText() or QrCode::encodeBinary().}\par
230 {\cf20  * - Mid level: Custom-make the list of segments and call QrCode::encodeSegments().}\par
231 {\cf20  * - Low level: Custom-make the array of data codeword bytes (including}\par
232 {\cf20  *   segment headers and final padding, excluding error correction codewords),}\par
233 {\cf20  *   supply the appropriate version number, and call the QrCode() constructor.}\par
234 {\cf20  * (Note that all ways require supplying the desired error correction level.)}\par
235 {\cf20  */}\par
236 {\cf17 class }QrCode final \{\par
237     {\cf17 public}: QrCode() = {\cf19 default};\par
238     {\cf20 /*---- Public helper enumeration ----*/}\par
239     \par
240     {\cf20 /* }\par
241 {\cf20      * The error correction level in a QR Code symbol.}\par
242 {\cf20      */}\par
243     {\cf17 public}: {\cf17 enum class} Ecc \{\par
244         LOW = 0 ,  {\cf20 // The QR Code can tolerate about  7% erroneous codewords}\par
245         MEDIUM  ,  {\cf20 // The QR Code can tolerate about 15% erroneous codewords}\par
246         QUARTILE,  {\cf20 // The QR Code can tolerate about 25% erroneous codewords}\par
247         HIGH    ,  {\cf20 // The QR Code can tolerate about 30% erroneous codewords}\par
248     \};\par
249     \par
250     \par
251     {\cf20 // Returns a value in the range 0 to 3 (unsigned 2-bit integer).}\par
252     {\cf17 private}: {\cf17 static} {\cf18 int} getFormatBits(Ecc ecl);\par
253     \par
254     \par
255     \par
256     {\cf20 /*---- Static factory functions (high level) ----*/}\par
257     \par
258     {\cf20 /* }\par
259 {\cf20      * Returns a QR Code representing the given Unicode text string at the given error correction level.}\par
260 {\cf20      * As a conservative upper bound, this function is guaranteed to succeed for strings that have 2953 or fewer}\par
261 {\cf20      * UTF-8 code units (not Unicode code points) if the low error correction level is used. The smallest possible}\par
262 {\cf20      * QR Code version is automatically chosen for the output. The ECC level of the result may be higher than}\par
263 {\cf20      * the ecl argument if it can be done without increasing the version.}\par
264 {\cf20      */}\par
265     {\cf17 public}: {\cf17 static} QrCode encodeText({\cf17 const} {\cf18 char} *text, Ecc ecl);\par
266     \par
267     \par
268     {\cf20 /* }\par
269 {\cf20      * Returns a QR Code representing the given binary data at the given error correction level.}\par
270 {\cf20      * This function always encodes using the binary segment mode, not any text mode. The maximum number of}\par
271 {\cf20      * bytes allowed is 2953. The smallest possible QR Code version is automatically chosen for the output.}\par
272 {\cf20      * The ECC level of the result may be higher than the ecl argument if it can be done without increasing the version.}\par
273 {\cf20      */}\par
274     {\cf17 public}: {\cf17 static} QrCode encodeBinary({\cf17 const} std::vector<std::uint8_t> &data, Ecc ecl);\par
275     \par
276     \par
277     {\cf20 /*---- Static factory functions (mid level) ----*/}\par
278     \par
279     {\cf20 /* }\par
280 {\cf20      * Returns a QR Code representing the given segments with the given encoding parameters.}\par
281 {\cf20      * The smallest possible QR Code version within the given range is automatically}\par
282 {\cf20      * chosen for the output. Iff boostEcl is true, then the ECC level of the result}\par
283 {\cf20      * may be higher than the ecl argument if it can be done without increasing the}\par
284 {\cf20      * version. The mask number is either between 0 to 7 (inclusive) to force that}\par
285 {\cf20      * mask, or -1 to automatically choose an appropriate mask (which may be slow).}\par
286 {\cf20      * This function allows the user to create a custom sequence of segments that switches}\par
287 {\cf20      * between modes (such as alphanumeric and byte) to encode text in less space.}\par
288 {\cf20      * This is a mid-level API; the high-level API is encodeText() and encodeBinary().}\par
289 {\cf20      */}\par
290     {\cf17 public}: {\cf17 static} QrCode encodeSegments({\cf17 const} std::vector<QrSegment> &segs, Ecc ecl,\par
291         {\cf18 int} minVersion=1, {\cf18 int} maxVersion=40, {\cf18 int} mask=-1, {\cf18 bool} boostEcl={\cf17 true});  {\cf20 // All optional parameters}\par
292     \par
293     \par
294     \par
295     {\cf20 /*---- Instance fields ----*/}\par
296     \par
297     {\cf20 // Immutable scalar parameters:}\par
298     \par
299     {\cf20 /* The version number of this QR Code, which is between 1 and 40 (inclusive).}\par
300 {\cf20      * This determines the size of this barcode. */}\par
301     {\cf17 private}: {\cf18 int} version;\par
302     \par
303     {\cf20 /* The width and height of this QR Code, measured in modules, between}\par
304 {\cf20      * 21 and 177 (inclusive). This is equal to version * 4 + 17. */}\par
305     {\cf17 private}: {\cf18 int} size;\par
306     \par
307     {\cf20 /* The error correction level used in this QR Code. */}\par
308     {\cf17 private}: Ecc errorCorrectionLevel;\par
309     \par
310     {\cf20 /* The index of the mask pattern used in this QR Code, which is between 0 and 7 (inclusive).}\par
311 {\cf20      * Even if a QR Code is created with automatic masking requested (mask = -1),}\par
312 {\cf20      * the resulting object still has a mask value between 0 and 7. */}\par
313     {\cf17 private}: {\cf18 int} mask;\par
314     \par
315     {\cf20 // Private grids of modules/pixels, with dimensions of size*size:}\par
316     \par
317     {\cf20 // The modules of this QR Code (false = light, true = dark).}\par
318     {\cf20 // Immutable after constructor finishes. Accessed through getModule().}\par
319     {\cf17 private}: std::vector<std::vector<bool> > modules;\par
320     \par
321     {\cf20 // Indicates function modules that are not subjected to masking. Discarded when constructor finishes.}\par
322     {\cf17 private}: std::vector<std::vector<bool> > isFunction;\par
323     \par
324     \par
325     \par
326     {\cf20 /*---- Constructor (low level) ----*/}\par
327     \par
328     {\cf20 /* }\par
329 {\cf20      * Creates a new QR Code with the given version number,}\par
330 {\cf20      * error correction level, data codeword bytes, and mask number.}\par
331 {\cf20      * This is a low-level API that most users should not use directly.}\par
332 {\cf20      * A mid-level API is the encodeSegments() function.}\par
333 {\cf20      */}\par
334     {\cf17 public}: QrCode({\cf18 int} ver, Ecc ecl, {\cf17 const} std::vector<std::uint8_t> &dataCodewords, {\cf18 int} msk);\par
335     \par
336     \par
337     \par
338     {\cf20 /*---- Public instance methods ----*/}\par
339     \par
340     {\cf20 /* }\par
341 {\cf20      * Returns this QR Code's version, in the range [1, 40].}\par
342 {\cf20      */}\par
343     {\cf17 public}: {\cf18 int} getVersion() {\cf17 const};\par
344     \par
345     \par
346     {\cf20 /* }\par
347 {\cf20      * Returns this QR Code's size, in the range [21, 177].}\par
348 {\cf20      */}\par
349     {\cf17 public}: {\cf18 int} getSize() {\cf17 const};\par
350     \par
351     \par
352     {\cf20 /* }\par
353 {\cf20      * Returns this QR Code's error correction level.}\par
354 {\cf20      */}\par
355     {\cf17 public}: Ecc getErrorCorrectionLevel() {\cf17 const};\par
356     \par
357     \par
358     {\cf20 /* }\par
359 {\cf20      * Returns this QR Code's mask, in the range [0, 7].}\par
360 {\cf20      */}\par
361     {\cf17 public}: {\cf18 int} getMask() {\cf17 const};\par
362     \par
363     \par
364     {\cf20 /* }\par
365 {\cf20      * Returns the color of the module (pixel) at the given coordinates, which is false}\par
366 {\cf20      * for light or true for dark. The top left corner has the coordinates (x=0, y=0).}\par
367 {\cf20      * If the given coordinates are out of bounds, then false (light) is returned.}\par
368 {\cf20      */}\par
369     {\cf17 public}: {\cf18 bool} getModule({\cf18 int} x, {\cf18 int} y) {\cf17 const};\par
370     \par
371     \par
372     \par
373     {\cf20 /*---- Private helper methods for constructor: Drawing function modules ----*/}\par
374     \par
375     {\cf20 // Reads this object's version field, and draws and marks all function modules.}\par
376     {\cf17 private}: {\cf18 void} drawFunctionPatterns();\par
377     \par
378     \par
379     {\cf20 // Draws two copies of the format bits (with its own error correction code)}\par
380     {\cf20 // based on the given mask and this object's error correction level field.}\par
381     {\cf17 private}: {\cf18 void} drawFormatBits({\cf18 int} msk);\par
382     \par
383     \par
384     {\cf20 // Draws two copies of the version bits (with its own error correction code),}\par
385     {\cf20 // based on this object's version field, iff 7 <= version <= 40.}\par
386     {\cf17 private}: {\cf18 void} drawVersion();\par
387     \par
388     \par
389     {\cf20 // Draws a 9*9 finder pattern including the border separator,}\par
390     {\cf20 // with the center module at (x, y). Modules can be out of bounds.}\par
391     {\cf17 private}: {\cf18 void} drawFinderPattern({\cf18 int} x, {\cf18 int} y);\par
392     \par
393     \par
394     {\cf20 // Draws a 5*5 alignment pattern, with the center module}\par
395     {\cf20 // at (x, y). All modules must be in bounds.}\par
396     {\cf17 private}: {\cf18 void} drawAlignmentPattern({\cf18 int} x, {\cf18 int} y);\par
397     \par
398     \par
399     {\cf20 // Sets the color of a module and marks it as a function module.}\par
400     {\cf20 // Only used by the constructor. Coordinates must be in bounds.}\par
401     {\cf17 private}: {\cf18 void} setFunctionModule({\cf18 int} x, {\cf18 int} y, {\cf18 bool} isDark);\par
402     \par
403     \par
404     {\cf20 // Returns the color of the module at the given coordinates, which must be in range.}\par
405     {\cf17 private}: {\cf18 bool} module({\cf18 int} x, {\cf18 int} y) {\cf17 const};\par
406     \par
407     \par
408     {\cf20 /*---- Private helper methods for constructor: Codewords and masking ----*/}\par
409     \par
410     {\cf20 // Returns a new byte string representing the given data with the appropriate error correction}\par
411     {\cf20 // codewords appended to it, based on this object's version and error correction level.}\par
412     {\cf17 private}: std::vector<std::uint8_t> addEccAndInterleave({\cf17 const} std::vector<std::uint8_t> &data) {\cf17 const};\par
413     \par
414     \par
415     {\cf20 // Draws the given sequence of 8-bit codewords (data and error correction) onto the entire}\par
416     {\cf20 // data area of this QR Code. Function modules need to be marked off before this is called.}\par
417     {\cf17 private}: {\cf18 void} drawCodewords({\cf17 const} std::vector<std::uint8_t> &data);\par
418     \par
419     \par
420     {\cf20 // XORs the codeword modules in this QR Code with the given mask pattern.}\par
421     {\cf20 // The function modules must be marked and the codeword bits must be drawn}\par
422     {\cf20 // before masking. Due to the arithmetic of XOR, calling applyMask() with}\par
423     {\cf20 // the same mask value a second time will undo the mask. A final well-formed}\par
424     {\cf20 // QR Code needs exactly one (not zero, two, etc.) mask applied.}\par
425     {\cf17 private}: {\cf18 void} applyMask({\cf18 int} msk);\par
426     \par
427     \par
428     {\cf20 // Calculates and returns the penalty score based on state of this QR Code's current modules.}\par
429     {\cf20 // This is used by the automatic mask choice algorithm to find the mask pattern that yields the lowest score.}\par
430     {\cf17 private}: {\cf18 long} getPenaltyScore() {\cf17 const};\par
431     \par
432     \par
433     \par
434     {\cf20 /*---- Private helper functions ----*/}\par
435     \par
436     {\cf20 // Returns an ascending list of positions of alignment patterns for this version number.}\par
437     {\cf20 // Each position is in the range [0,177), and are used on both the x and y axes.}\par
438     {\cf20 // This could be implemented as lookup table of 40 variable-length lists of unsigned bytes.}\par
439     {\cf17 private}: std::vector<int> getAlignmentPatternPositions() {\cf17 const};\par
440     \par
441     \par
442     {\cf20 // Returns the number of data bits that can be stored in a QR Code of the given version number, after}\par
443     {\cf20 // all function modules are excluded. This includes remainder bits, so it might not be a multiple of 8.}\par
444     {\cf20 // The result is in the range [208, 29648]. This could be implemented as a 40-entry lookup table.}\par
445     {\cf17 private}: {\cf17 static} {\cf18 int} getNumRawDataModules({\cf18 int} ver);\par
446     \par
447     \par
448     {\cf20 // Returns the number of 8-bit data (i.e. not error correction) codewords contained in any}\par
449     {\cf20 // QR Code of the given version number and error correction level, with remainder bits discarded.}\par
450     {\cf20 // This stateless pure function could be implemented as a (40*4)-cell lookup table.}\par
451     {\cf17 private}: {\cf17 static} {\cf18 int} getNumDataCodewords({\cf18 int} ver, Ecc ecl);\par
452     \par
453     \par
454     {\cf20 // Returns a Reed-Solomon ECC generator polynomial for the given degree. This could be}\par
455     {\cf20 // implemented as a lookup table over all possible parameter values, instead of as an algorithm.}\par
456     {\cf17 private}: {\cf17 static} std::vector<std::uint8_t> reedSolomonComputeDivisor({\cf18 int} degree);\par
457     \par
458     \par
459     {\cf20 // Returns the Reed-Solomon error correction codeword for the given data and divisor polynomials.}\par
460     {\cf17 private}: {\cf17 static} std::vector<std::uint8_t> reedSolomonComputeRemainder({\cf17 const} std::vector<std::uint8_t> &data, {\cf17 const} std::vector<std::uint8_t> &divisor);\par
461     \par
462     \par
463     {\cf20 // Returns the product of the two given field elements modulo GF(2^8/0x11D).}\par
464     {\cf20 // All inputs are valid. This could be implemented as a 256*256 lookup table.}\par
465     {\cf17 private}: {\cf17 static} std::uint8_t reedSolomonMultiply(std::uint8_t x, std::uint8_t y);\par
466     \par
467     \par
468     {\cf20 // Can only be called immediately after a light run is added, and}\par
469     {\cf20 // returns either 0, 1, or 2. A helper function for getPenaltyScore().}\par
470     {\cf17 private}: {\cf18 int} finderPenaltyCountPatterns({\cf17 const} std::array<int,7> &runHistory) {\cf17 const};\par
471     \par
472     \par
473     {\cf20 // Must be called at the end of a line (row or column) of modules. A helper function for getPenaltyScore().}\par
474     {\cf17 private}: {\cf18 int} finderPenaltyTerminateAndCount({\cf18 bool} currentRunColor, {\cf18 int} currentRunLength, std::array<int,7> &runHistory) {\cf17 const};\par
475     \par
476     \par
477     {\cf20 // Pushes the given value to the front and drops the last value. A helper function for getPenaltyScore().}\par
478     {\cf17 private}: {\cf18 void} finderPenaltyAddHistory({\cf18 int} currentRunLength, std::array<int,7> &runHistory) {\cf17 const};\par
479     \par
480     \par
481     {\cf20 // Returns true iff the i'th bit of x is set to 1.}\par
482     {\cf17 private}: {\cf17 static} {\cf18 bool} getBit({\cf18 long} x, {\cf18 int} i);\par
483     \par
484     \par
485     {\cf20 /*---- Constants and tables ----*/}\par
486     \par
487     {\cf20 // The minimum version number supported in the QR Code Model 2 standard.}\par
488     {\cf17 public}: {\cf17 static} {\cf17 constexpr} {\cf18 int} MIN_VERSION =  1;\par
489     \par
490     {\cf20 // The maximum version number supported in the QR Code Model 2 standard.}\par
491     {\cf17 public}: {\cf17 static} {\cf17 constexpr} {\cf18 int} MAX_VERSION = 40;\par
492     \par
493     \par
494     {\cf20 // For use in getPenaltyScore(), when evaluating which mask is best.}\par
495     {\cf17 private}: {\cf17 static} {\cf17 const} {\cf18 int} PENALTY_N1;\par
496     {\cf17 private}: {\cf17 static} {\cf17 const} {\cf18 int} PENALTY_N2;\par
497     {\cf17 private}: {\cf17 static} {\cf17 const} {\cf18 int} PENALTY_N3;\par
498     {\cf17 private}: {\cf17 static} {\cf17 const} {\cf18 int} PENALTY_N4;\par
499     \par
500     \par
501     {\cf17 private}: {\cf17 static} {\cf17 const} std::int8_t ECC_CODEWORDS_PER_BLOCK[4][41];\par
502     {\cf17 private}: {\cf17 static} {\cf17 const} std::int8_t NUM_ERROR_CORRECTION_BLOCKS[4][41];\par
503     \par
504 \};\par
505 \par
506 \par
507 \par
508 {\cf20 /*---- Public exception class ----*/}\par
509 \par
510 {\cf20 /* }\par
511 {\cf20  * Thrown when the supplied data does not fit any QR Code version. Ways to handle this exception include:}\par
512 {\cf20  * - Decrease the error correction level if it was greater than Ecc::LOW.}\par
513 {\cf20  * - If the encodeSegments() function was called with a maxVersion argument, then increase}\par
514 {\cf20  *   it if it was less than QrCode::MAX_VERSION. (This advice does not apply to the other}\par
515 {\cf20  *   factory functions because they search all versions up to QrCode::MAX_VERSION.)}\par
516 {\cf20  * - Split the text data into better or optimal segments in order to reduce the number of bits required.}\par
517 {\cf20  * - Change the text or binary data to be shorter.}\par
518 {\cf20  * - Change the text to fit the character set of a particular segment mode (e.g. alphanumeric).}\par
519 {\cf20  * - Propagate the error upward to the caller/user.}\par
520 {\cf20  */}\par
521 {\cf17 class }data_too_long : {\cf17 public} std::length_error \{\par
522     \par
523     {\cf17 public}: {\cf17 explicit} data_too_long({\cf17 const} std::string &msg);\par
524     \par
525 \};\par
526 \par
527 \par
528 \par
529 {\cf20 /* }\par
530 {\cf20  * An appendable sequence of bits (0s and 1s). Mainly used by QrSegment.}\par
531 {\cf20  */}\par
532 {\cf17 class }BitBuffer final : {\cf17 public} std::vector<bool> \{\par
533     \par
534     {\cf20 /*---- Constructor ----*/}\par
535     \par
536     {\cf20 // Creates an empty bit buffer (length 0).}\par
537     {\cf17 public}: BitBuffer();\par
538     \par
539     \par
540     \par
541     {\cf20 /*---- Method ----*/}\par
542     \par
543     {\cf20 // Appends the given number of low-order bits of the given value}\par
544     {\cf20 // to this buffer. Requires 0 <= len <= 31 and val < 2^len.}\par
545     {\cf17 public}: {\cf18 void} appendBits(std::uint32_t val, {\cf18 int} len);\par
546     \par
547 \};\par
548 \par
549 \}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB qr_generator/QrCodeGeneratorDemo.cpp\par \pard\plain 
{\tc\tcl2 \v qr_generator/QrCodeGeneratorDemo.cpp}
{\xe \v qr_generator/QrCodeGeneratorDemo.cpp}
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <climits>}\par
{\f2 #include <cstdint>}\par
{\f2 #include <cstdlib>}\par
{\f2 #include <cstring>}\par
{\f2 #include <iostream>}\par
{\f2 #include <sstream>}\par
{\f2 #include <string>}\par
{\f2 #include <vector>}\par
{\f2 #include "qrcodegen.hpp"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'D4\'F3\'ED\'EA\'F6\'E8\'E8\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} ()\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'D4\'F3\'ED\'EA\'F6\'E8\'E8\par
\pard\plain 
{\xe \v main\:QrCodeGeneratorDemo.cpp}
{\xe \v QrCodeGeneratorDemo.cpp\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main ()}}
\par
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB qr_generator/Readme.markdown\par \pard\plain 
{\tc\tcl2 \v qr_generator/Readme.markdown}
{\xe \v qr_generator/Readme.markdown}
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB QRBeautify.cpp\par \pard\plain 
{\tc\tcl2 \v QRBeautify.cpp}
{\xe \v QRBeautify.cpp}
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <pngwriter.h>}\par
{\f2 #include <iostream>}\par
{\f2 #include "QRBeautify.h"}\par
{\f2 #include "qr_generator/qrcodegen.hpp"}\par
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\'D4\'E0\'E9\'EB QRBeautify.h\par \pard\plain 
{\tc\tcl2 \v QRBeautify.h}
{\xe \v QRBeautify.h}
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include "qr_generator/qrcodegen.hpp"}\par
{\f2 #include "pngwriter.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CA\'EB\'E0\'F1\'F1\'FB\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
class {\b QrBeautifier}{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid {\i {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Main class. }}\par}
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'E5\'F0\'E5\'F7\'E8\'F1\'EB\'E5\'ED\'E8\'FF\par
\pard\plain 

{
\pard\plain \s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
enum {\b AnchorShape} \{ {\b Square}
, {\b Round}
 \}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
\'CF\'E5\'F0\'E5\'F7\'E8\'F1\'EB\'E5\'ED\'E8\'FF\par
\pard\plain 
{\xe \v AnchorShape\:QRBeautify.h}
{\xe \v QRBeautify.h\:AnchorShape}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
enum {\b AnchorShape}}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\par
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
\'DD\'EB\'E5\'EC\'E5\'ED\'F2\'FB \'EF\'E5\'F0\'E5\'F7\'E8\'F1\'EB\'E5\'ED\'E8\'E9:\par}
\pard\plain \s81\li360\widctlpar\ql\adjustright \fs20\cgrid \trowd \trgaph108\trleft426\tblind426\trbrdrt\brdrs\brdrw10\brdrcf15 \trbrdrl\brdrs\brdrw10\brdrcf15 \trbrdrb\brdrs\brdrw10\brdrcf15 \trbrdrr\brdrs\brdrw10\brdrcf15 \trbrdrh\brdrs\brdrw10\brdrcf15 \trbrdrv\brdrs\brdrw10\brdrcf15 
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx2187
\clvertalt\clbrdrt\brdrs\brdrw10\brdrcf15 \clbrdrl\brdrs\brdrw10\brdrcf15 \clbrdrb\brdrs\brdrw10\brdrcf15 \clbrdrr \brdrs\brdrw10\brdrcf15 \cltxlrtb \cellx8748
\pard \widctlpar\intbl\adjustright
{\xe \v Square\:QRBeautify.h}
{\xe \v QRBeautify.h\:Square}
{\qr Square{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
\cell }{\cell }{\row }
{\xe \v Round\:QRBeautify.h}
{\xe \v QRBeautify.h\:Round}
{\qr Round{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
\cell }{\cell }{\row }
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
QRBeautify.h\par \pard\plain 
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
\'D1\'EC. \'E4\'EE\'EA\'F3\'EC\'E5\'ED\'F2\'E0\'F6\'E8\'FE.{
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 1 {\cf21 #pragma once}\par
2 {\cf21 #include "qr_generator/qrcodegen.hpp"}\par
3 {\cf21 #include "pngwriter.h"}\par
4 \par
5 {\cf17 using }qrcodegen::QrCode;\par
6 \par
7 {\cf17 enum} AnchorShape \{\par
8     Square,\par
9     Round\par
10 \};\par
11 \par
13 {\cf17 class }QrBeautifier \{\par
14     QrCode qr;\par
15     pngwriter image;\par
16     {\cf17 const} {\cf18 char}* text;\par
17 \par
20     QrCode generateQRCode();\par
21 {\cf17 public}:\par
26     QrBeautifier({\cf17 const} {\cf18 char}* text);\par
27     \par
30     {\cf18 void} saveImage();\par
31 \par
39     {\cf18 void} makeSolidImage({\cf18 int} red, {\cf18 int} green, {\cf18 int} blue, AnchorShape shape);\par
40 \par
45     {\cf18 void} overlayImageWithQR({\cf17 const} {\cf18 char}* image_path);\par
46 \par
51     {\cf18 void} overlayQRWithImage({\cf17 const} {\cf18 char}* image_path);\par
52 \par
57     {\cf18 void} heatmap(AnchorShape shape);\par
58 \};\par
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \'C0\'EB\'F4\'E0\'E2\'E8\'F2\'ED\'FB\'E9 \'F3\'EA\'E0\'E7\'E0\'F2\'E5\'EB\'FC\par 
\pard\plain 
{\tc \v \'C0\'EB\'F4\'E0\'E2\'E8\'F2\'ED\'FB\'E9 \'F3\'EA\'E0\'E7\'E0\'F2\'E5\'EB\'FC}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}
